machine:
  timezone:
    Europe/Vienna
  java:
    version: oraclejdk8
  environment:
    ZEMU_: "appemu23"
    EMU_: "appemu21"
    XEMU_: "appemu10"
    Zsdpath: "/sdcard"
    sdpath: "/storage/sdcard"
    Xsdpath: "/mnt/sdcard"
    ANDROID_HOME: /usr/local/android-sdk-linux
    ANDROID_SDK: /usr/local/android-sdk-linux/
    _SDK_: /usr/local/android-sdk-linux/
    _JAVA_OPTIONS: "-Xms512m -Xmx1524m"
    JAVA_OPTS: "-Xms512m -Xmx1524m"
    GRADLE_OPTS: '-Xmx512m -Dorg.gradle.jvmargs="-Xmx1700m -XX:+HeapDumpOnOutOfMemoryError -XX:MaxPermSize=1700m"'
    CLASS_P: com.zoffcc.applications.sharetoclipboard
    START_INTENT_P: com.zoffcc.applications.sharetoclipboard.MainActivity
    DEBIAN_FRONTEND: noninteractive
###### custom 2 ######
    GRADLE_HOME: ~/g/gradle-custom
    PATH: ~/g/gradle-custom/bin:$PATH
#
#   GRADLE_CUSTOM_VERSION -> [0, 1]
#   GRADLE_CUSTOM_VNUM -> what version?
#
    GRADLE_CUSTOM_VERSION: 0
    GRADLE_CUSTOM_VNUM: 3.1
    # ANDROID_DAILY_OVERRIDE: "d349fb0bfb70be0d783e6c79454a5ceb276095ed"
###### custom 2 ######
dependencies:
  cache_directories:
    - ~/.android
    - ~/.gradle
  override:
    - android list sdk --all | grep -i tools
    - android list sdk --all --extended
  pre:
    - wget 'https://raw.githubusercontent.com/zoff99/android_sdk_install_wrapper/master/__sdk_update__.sh' -O ~/__sdk_update__.sh
    - chmod a+rx ~/__sdk_update__.sh


    - sudo apt-get update > /dev/null 2> /dev/null
    - sudo apt-get install xvfb > /dev/null 2> /dev/null
    - sudo apt-get install xdotool > /dev/null 2> /dev/null
    - sudo apt-get install telnet > /dev/null 2> /dev/null
    - sudo apt-get install x11-utils > /dev/null 2> /dev/null
    - sudo apt-get install xvkbd > /dev/null 2> /dev/null
    - sudo apt-get install qrencode > /dev/null 2> /dev/null

    - echo y | android update sdk --no-ui --all --filter "tools"
    - android list sdk --all | grep -i tools
    - android list sdk --all --extended
    - echo y | android update sdk --no-ui --all --filter "tools"

    - echo y | android update sdk --no-ui --all --filter build-tools-23.0.1 # we use this for zipalign
    - echo y | android update sdk --no-ui --all --filter build-tools-23.0.3
    - echo y | android update sdk --no-ui --all --filter build-tools-24.0.2
    - echo y | android update sdk --no-ui --all --filter build-tools-24.0.3
    - echo y | android update sdk --no-ui --all --filter build-tools-25.0.0
    - echo y | android update sdk --no-ui --all --filter build-tools-25.0.2
    - echo y | android update sdk --no-ui --all --filter build-tools-25.0.3
    - echo y | android update sdk --no-ui --all --filter android-16 ; exit 0
    - echo y | android update sdk --no-ui --all --filter android-21
    - echo y | android update sdk --no-ui --all --filter android-23
    - echo y | android update sdk --no-ui --all --filter android-24
    - echo y | android update sdk --no-ui --all --filter android-25
    - echo y | android update sdk --no-ui --all --filter platform-tools

    - echo y | android update sdk --no-ui --all --filter extra-android-m2repository > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter extra-google-m2repository > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter extra-android-support > /dev/null 2> /dev/null

    - echo y | android update sdk --no-ui --all --filter platform-tools-preview > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-android-21
    - echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-android-23 > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-addon-google_apis-google-23 > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter addon-google_apis-google-23 > /dev/null 2> /dev/null

    - echo ${ANDROID_HOME} ; exit 0
    - ls -al "${ANDROID_HOME}/licenses" ; exit 0

    - mkdir -p "${ANDROID_HOME}/licenses" ;
      echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "${ANDROID_HOME}/licenses/android-sdk-license" ;
      echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > "${ANDROID_HOME}/licenses/android-sdk-preview-license" ;
      echo -e "\nd975f751698a77b662f1254ddbeed3901e976f5a" > "${ANDROID_HOME}/licenses/intel-android-extra-license"


    - gradle -v # display gradle version
    - if [ "$GRADLE_CUSTOM_VERSION""x" == "1x" ]; then cd ~ ; wget 'https://services.gradle.org/distributions/gradle-'"$GRADLE_CUSTOM_VNUM"'-bin.zip' ; fi
    - if [ "$GRADLE_CUSTOM_VERSION""x" == "1x" ]; then mkdir ~/g ; cd ~/g ; unzip ~/gradle-"$GRADLE_CUSTOM_VNUM"-bin.zip ; fi
    - if [ "$GRADLE_CUSTOM_VERSION""x" == "1x" ]; then cd ~/g ; mv -v ./gradle-"$GRADLE_CUSTOM_VNUM" ./gradle-custom ; fi
    - gradle -v # display gradle version

    #- ./gradlew assembleRelease --info --stacktrace --parallel;
    #- ./gradlew assembleDebug --info --stacktrace --parallel;
    - ./gradlew assembleDebug --info --no-daemon --stacktrace -x lint

    - find . -name '*.apk' ; exit 0

    - mkdir -p app/build/outputs/apk/
    - cp -v app/build/outputs/apk/app-debug.apk app/build/outputs/apk/app-debug-unaligned.apk

    - zip -d app/build/outputs/apk/app-debug-unaligned.apk META-INF/\*     # remove signature !!
    - cp -av app/build/outputs/apk/app-debug-unaligned.apk ~/app.apk ;
      cd ~/ ;
      echo xxxxxxrm -f ~/.android/debug.keystore ;
      ls -al ~/.android/debug.keystore ;
      if [ ! -f ~/.android/debug.keystore ]; then echo "*** generating new signer key ***" ;
      echo "*** generating new signer key ***";
      echo "*** generating new signer key ***";
      keytool -genkey -v -keystore ~/.android/debug.keystore -storepass android -keyalg RSA -keysize 2048 -validity 10000 -alias androiddebugkey -keypass android -dname "CN=Android Debug,O=Android,C=US" ;
      fi ;
      ls -al ~/ ;
      jarsigner -verbose -keystore ~/.android/debug.keystore -storepass android -keypass android -sigalg SHA1withRSA -digestalg SHA1 -sigfile CERT -signedjar app-signed.apk app.apk androiddebugkey ;
      ls -al ~/ ;
      $_SDK_/build-tools/23.0.1/zipalign -v 4 app-signed.apk app-signed-aligned.apk ;
      ls -al ~/ ;
      pwd ;
      ls -al ;
      cp -av app-signed-aligned.apk $CIRCLE_ARTIFACTS/${CIRCLE_PROJECT_REPONAME}.apk || exit 1

##   also make apk files with different names for each build (for individual downloads)
    - cp -av $CIRCLE_ARTIFACTS/${CIRCLE_PROJECT_REPONAME}.apk $CIRCLE_ARTIFACTS/${CIRCLE_PROJECT_REPONAME}_circleci_$CIRCLE_SHA1.apk
##   qr code to scan with your phone to directly download the apk file (for convenience)
    - qrencode -o $CIRCLE_ARTIFACTS/QR_apk.png 'https://circle-artifacts.com/gh/'${CIRCLE_PROJECT_USERNAME}'/'${CIRCLE_PROJECT_REPONAME}'/'${CIRCLE_BUILD_NUM}'/artifacts/'${CIRCLE_NODE_INDEX}'/tmp/'`basename $CIRCLE_ARTIFACTS`'/'"${CIRCLE_PROJECT_REPONAME}_circleci_$CIRCLE_SHA1.apk" ; exit 0
##   qr code to go directly to the aritfacts (to scan with phone)
    - qrencode -o $CIRCLE_ARTIFACTS/QR_artifacts.png 'https://circleci.com/gh/'${CIRCLE_PROJECT_USERNAME}'/'${CIRCLE_PROJECT_REPONAME}'/'${CIRCLE_BUILD_NUM}'#artifacts' ; exit 0
test:
  pre:
    - mksdcard -l e 8000M sdcard.img
    - echo 'mtools_skip_check=1' > ~/.mtoolsrc
    - android list targets
#
    - if [ "$EMU_" == "appemu23" ]; then echo "no" | android create avd -n appemu23 -f -t android-23 --abi default/armeabi-v7a --skin "WXGA720" ; fi
    - if [ "$EMU_" == "appemu23" ]; then cat ~/.android/avd/appemu23.avd/config.ini ; fi
#
    - if [ "$EMU_" == "appemu21" ]; then echo "no" | android create avd -n appemu21 -f -t android-21 --abi default/armeabi-v7a --skin "WXGA720" ; fi
    - if [ "$EMU_" == "appemu21" ]; then cat ~/.android/avd/appemu21.avd/config.ini ; fi
#
    - if [ "$EMU_" == "appemu10" ]; then echo "no" | android create avd -n appemu10 -f -t android-10 --abi default/armeabi --skin "WQVGA432" ; fi
    - if [ "$EMU_" == "appemu10" ]; then cat ~/.android/avd/appemu10.avd/config.ini ; fi
#
    - echo "$EMU_"
    - echo "$sdpath"
  override:
    - emulator -avd "$EMU_" -sdcard sdcard.img -no-audio:
        background: true
        parallel: true
    - circle-android wait-for-boot

    - sleep 210 # let the emulator settle down first

    - adb shell input keyevent 82
    - sleep 10
    - import -window root $CIRCLE_ARTIFACTS/capture_emulator_running.png

    - adb shell ls -al /storage/ ; exit 0
    - adb shell ls -al /sdcard/ ; exit 0

    - adb install ~/app-signed-aligned.apk

    - adb logcat -v time > $CIRCLE_ARTIFACTS/adb_out.txt 2>&1 :
        background: true
    - sleep 60
    
    - adb shell am start -n $CLASS_P/$START_INTENT_P
    - sleep 60
    - sleep 120 # wait to be sure the app has started fully

    - died_count=`cat $CIRCLE_ARTIFACTS/adb_out.txt|grep 'Process. '"$CLASS_P"', PID.'|wc -l|tr -d ' '` ; if [ $died_count -gt 0 ]; then echo "app crashed"; exit 1; fi

    - import -window root $CIRCLE_ARTIFACTS/capture_app_running.png # get proof that the app is running
    - adb shell screencap -p | sed 's/\r$//' > $CIRCLE_ARTIFACTS/capture_app_running_2.png

# ----- CI artifact cleanup -----
    - mkdir -p $CIRCLE_ARTIFACTS/other/
    - mv -v $CIRCLE_ARTIFACTS/adb_out.txt $CIRCLE_ARTIFACTS/other/
    - mv -v $CIRCLE_ARTIFACTS/stderr*.txt $CIRCLE_ARTIFACTS/other/
    - mv -v $CIRCLE_ARTIFACTS/stdout*.txt $CIRCLE_ARTIFACTS/other/
# ----- CI artifact cleanup -----

